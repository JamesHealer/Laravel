{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { UserParams } from '../models/UserParams';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let EmployeeService = /*#__PURE__*/(() => {\n  class EmployeeService {\n    //\n    // totalRows = 0;\n    // pageSize = 10;\n    // pageNumber = 0;\n    // pageSizeOptions: number[] = [5, 10, 25, 100];\n    constructor(httpClient) {\n      this.httpClient = httpClient; // Getting base URL of Api from enviroment.\n\n      this.baseUrl = environment.KUPFApiUrl; //\n\n      this.employeeDetails = [];\n      this.userParams = new UserParams();\n    }\n\n    getUserParams() {\n      return this.userParams;\n    }\n\n    setUserParams(params) {\n      this.userParams = params;\n    }\n\n    AddEmployee(response) {\n      return this.httpClient.post(this.baseUrl + `Employee/AddEmployee`, response);\n    }\n\n    validateEmployeeId(tenantId, locationId, employeeId) {\n      return this.httpClient.get(this.baseUrl + `Employee/ValidateEmployeeId?tenantId=${tenantId}&locationId=${locationId}&employeeId=${employeeId}`);\n    }\n\n    ValidateEmployeeData(response) {\n      return this.httpClient.post(this.baseUrl + `Employee/ValidateEmployeeData`, response);\n    }\n\n    UpdateEmployee(response) {\n      return this.httpClient.put(this.baseUrl + `Employee/UpdateEmployee`, response);\n    }\n\n    GetEmployeeById(id) {\n      return this.httpClient.get(this.baseUrl + `Employee/GetEmployeeById?employeeId=` + id).pipe(map(employeeDetails => {\n        this.employeeDetails = employeeDetails;\n        return employeeDetails;\n      }));\n    }\n\n    DeleteEmployee(dtailedEmployee) {\n      return this.httpClient.post(`${this.baseUrl}Employee/DeleteEmployee`, dtailedEmployee);\n    }\n\n    GetEmployees(userParams, query) {\n      return this.httpClient.get(this.baseUrl + `Employee/GetEmployees?PageNumber=${userParams.pageNumber}&PageSize=${userParams.pageSize}&Query=${query}`, {\n        observe: 'response'\n      });\n    }\n\n    FilterEmployee(userParams, query, filterVal) {\n      return this.httpClient.get(this.baseUrl + `Employee/FilterEmployee?PageNumber=${userParams.pageNumber}&PageSize=${userParams.pageSize}&Query=${query}&filterVal=${filterVal}`, {\n        observe: 'response'\n      });\n    }\n\n    PrintLabel(userParams, query, filterVal) {\n      return this.httpClient.get(this.baseUrl + `Employee/PrintLabel?PageNumber=${userParams.pageNumber}&PageSize=${userParams.pageSize}&Query=${query}&filterVal=${filterVal}`, {\n        observe: 'response'\n      });\n    }\n\n    GetImportDataUploader(tenantId) {\n      return this.httpClient.get(this.baseUrl + `Common/GetImportDataUploader?tenentid=${tenantId}`);\n    }\n\n    AddEmployeeServiceData(gridValue) {\n      return this.httpClient.post(this.baseUrl + `Employee/AddEmployeeServiceData`, gridValue);\n    } // https://kupfapi.erp53.com/api/Employee/EmployeeServiceDataDraftSubmit\n\n\n    EmployeeServiceDataDraftSubmit(gridValue) {\n      return this.httpClient.post(this.baseUrl + `Employee/EmployeeServiceDataDraftSubmit`, gridValue);\n    }\n\n    DeletEmployeeImportServiceData(gridValue) {\n      return this.httpClient.post(this.baseUrl + `Employee/DeletEmployeeImportServiceData`, gridValue);\n    }\n\n    getEmployeeImportServiceData(tenantId, pCode, val, sampleFile) {\n      return this.httpClient.get(this.baseUrl + `Employee/GetEmployeeImportServiceData?tenantId=${tenantId}&periodCode=${pCode}&DataImportFilterValue=${val}&UploaderType=${sampleFile}`);\n    }\n\n    DownloadSampleFile(sampleFileName) {\n      return this.httpClient.get(this.baseUrl + `Employee/DownloadSampleFile?fileName=${sampleFileName}`, {\n        responseType: 'blob'\n      });\n    }\n\n    UploadEmployeeExcelFile(formData) {\n      // const headers = new HttpHeaders({\n      //   'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW',\n      // });\n      return this.httpClient.post(this.baseUrl + `Employee/UploadEmployeeExcelFile`, formData);\n    }\n\n    ImportEmployeeData(employeeData) {\n      return this.httpClient.post(this.baseUrl + `Employee/ImportEmployeeData`, employeeData);\n    }\n\n    CheckMonthlyData(monthlyData) {\n      return this.httpClient.post(this.baseUrl + `Employee/CheckMonthlyData`, monthlyData);\n    }\n\n    ImportMonthlyData(monthlyData) {\n      return this.httpClient.post(this.baseUrl + `Employee/ImportMonthlyData`, monthlyData);\n    }\n\n    ResetEmployeePassword(formData) {\n      return this.httpClient.get(this.baseUrl + `Login/ResetEmployeePassword?employeeId=${formData.employeeId}&Password=${formData.Password}&MobileNo=${formData.MobileNo}&Emailid=${formData.Emailid}&EmployeeLoginId=${formData.EmployeeLoginId}`);\n    }\n\n  }\n\n  EmployeeService.ɵfac = function EmployeeService_Factory(t) {\n    return new (t || EmployeeService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  EmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeeService,\n    factory: EmployeeService.ɵfac,\n    providedIn: 'root'\n  });\n  return EmployeeService;\n})();","map":null,"metadata":{},"sourceType":"module"}