{"ast":null,"code":"import { DataUtil, getAttributeValueByBreakpoint, stringSnakeToCamel, getObjectPropertyValueByKey, EventHandlerUtil, throttle } from '../_utils/index';\nconst defaultPlaceOptions = {\n  mode: 'append'\n};\nconst defaultPlaceQueires = {\n  componentName: 'place',\n  instanseQuery: '[data-kt-place=\"true\"]',\n  attrQuery: 'data-kt-place-'\n};\nlet PlaceComponent = /*#__PURE__*/(() => {\n  class PlaceComponent {\n    constructor(_element, _options, _queries) {\n      ///////////////////////\n      // ** Public API  ** //\n      ///////////////////////\n      this.update = () => {\n        var _a;\n\n        const parentSelector = (_a = this.getOption('parent')) === null || _a === void 0 ? void 0 : _a.toString();\n        const mode = this.getOption('mode');\n        const parentElement = parentSelector ? document.querySelector(parentSelector) : null;\n\n        if (parentElement && this.element.parentNode !== parentElement) {\n          if (mode === 'prepend') {\n            parentElement.prepend(this.element);\n          } else if (mode === 'append') {\n            parentElement.append(this.element);\n          }\n        }\n      }; // Event API\n\n\n      this.on = (name, handler) => {\n        return EventHandlerUtil.on(this.element, name, handler);\n      };\n\n      this.one = (name, handler) => {\n        return EventHandlerUtil.one(this.element, name, handler);\n      };\n\n      this.off = name => {\n        return EventHandlerUtil.off(this.element, name);\n      };\n\n      this.trigger = (name, event) => {\n        return EventHandlerUtil.trigger(this.element, name, event);\n      };\n\n      this.element = _element;\n      this.options = Object.assign(defaultPlaceOptions, _options);\n      this.queries = _queries; // Initial update\n\n      this.update();\n      DataUtil.set(this.element, this.queries.componentName, this);\n    }\n\n    getOption(name) {\n      const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`);\n\n      if (attr) {\n        let value = getAttributeValueByBreakpoint(attr);\n\n        if (attr != null && String(value) === 'true') {\n          return true;\n        } else if (value !== null && String(value) === 'false') {\n          return false;\n        }\n\n        return value;\n      } else {\n        const optionName = stringSnakeToCamel(name);\n        const option = getObjectPropertyValueByKey(this.options, optionName);\n\n        if (option) {\n          return getAttributeValueByBreakpoint(option);\n        } else {\n          return null;\n        }\n      }\n    }\n\n  }\n\n  // Static methods\n  PlaceComponent.getInstance = (el, componentName = defaultPlaceQueires.componentName) => {\n    const place = DataUtil.get(el, componentName);\n\n    if (place) {\n      return place;\n    }\n\n    return null;\n  };\n\n  PlaceComponent.createInstances = (selector = defaultPlaceQueires.instanseQuery, options = defaultPlaceOptions, queries = defaultPlaceQueires) => {\n    const elements = document.body.querySelectorAll(selector);\n    elements.forEach(el => {\n      const item = el;\n      let place = PlaceComponent.getInstance(item);\n\n      if (!place) {\n        place = new PlaceComponent(item, options, queries);\n      }\n    });\n  };\n\n  PlaceComponent.createInsance = (selector = defaultPlaceQueires.instanseQuery, options = defaultPlaceOptions, queries = defaultPlaceQueires) => {\n    const element = document.body.querySelector(selector);\n\n    if (!element) {\n      return;\n    }\n\n    const item = element;\n    let place = PlaceComponent.getInstance(item);\n\n    if (!place) {\n      place = new PlaceComponent(item, options, queries);\n    }\n\n    return place;\n  };\n\n  PlaceComponent.bootstrap = (selector = defaultPlaceQueires.instanseQuery) => {\n    PlaceComponent.createInstances(selector);\n  };\n\n  PlaceComponent.reinitialization = (selector = defaultPlaceQueires.instanseQuery) => {\n    PlaceComponent.createInstances(selector);\n  }; // Window resize handler\n\n\n  return PlaceComponent;\n})();\nwindow.addEventListener('resize', function () {\n  let timer;\n  throttle(timer, () => {\n    // Locate and update Offcanvas instances on window resize\n    const elements = document.querySelectorAll(defaultPlaceQueires.instanseQuery);\n    elements.forEach(el => {\n      const place = PlaceComponent.getInstance(el);\n\n      if (place) {\n        place.update();\n      }\n    });\n  }, 200);\n});\nexport { PlaceComponent, defaultPlaceOptions, defaultPlaceQueires };","map":null,"metadata":{},"sourceType":"module"}