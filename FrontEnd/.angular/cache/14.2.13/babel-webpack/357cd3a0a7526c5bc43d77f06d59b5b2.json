{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as objectPath from 'object-path';\nimport { DefaultLayoutConfig } from './default-layout.config';\nimport * as i0 from \"@angular/core\";\nconst LAYOUT_CONFIG_LOCAL_STORAGE_KEY = `${environment.appVersion}-layoutConfig`;\nexport const getEmptyCSSVariables = () => {\n  return {\n    body: new Map()\n  };\n};\nexport function getEmptyHTMLAttributes() {\n  return {\n    asideMenu: {},\n    headerMobile: {},\n    headerMenu: {},\n    headerContainer: {},\n    pageTitle: {}\n  };\n}\nexport function getEmptyCssClasses() {\n  return {\n    header: [],\n    headerContainer: [],\n    headerMobile: [],\n    headerMenu: [],\n    aside: [],\n    asideMenu: [],\n    asideToggle: [],\n    toolbar: [],\n    toolbarContainer: [],\n    content: [],\n    contentContainer: [],\n    footerContainer: [],\n    sidebar: [],\n    pageTitle: []\n  };\n}\nexport let LayoutService = /*#__PURE__*/(() => {\n  class LayoutService {\n    constructor() {\n      this.layoutConfigSubject = new BehaviorSubject(undefined); // scope list of css classes\n\n      this.classes = getEmptyCssClasses(); // scope list of html attributes\n\n      this.attrs = getEmptyHTMLAttributes();\n    }\n\n    initConfig() {\n      const configFromLocalStorage = localStorage.getItem(LAYOUT_CONFIG_LOCAL_STORAGE_KEY);\n\n      if (configFromLocalStorage) {\n        try {\n          this.layoutConfigSubject.next(JSON.parse(configFromLocalStorage));\n          return;\n        } catch (error) {\n          this.removeConfig();\n          console.error('config parse from local storage', error);\n        }\n      }\n\n      this.layoutConfigSubject.next(DefaultLayoutConfig);\n    }\n\n    removeConfig() {\n      localStorage.removeItem(LAYOUT_CONFIG_LOCAL_STORAGE_KEY);\n    }\n\n    refreshConfigToDefault() {\n      this.setConfigWithPageRefresh(undefined);\n    }\n\n    getConfig() {\n      const config = this.layoutConfigSubject.value;\n\n      if (!config) {\n        return DefaultLayoutConfig;\n      }\n\n      return config;\n    }\n\n    setConfig(config) {\n      if (!config) {\n        this.removeConfig();\n      } else {\n        localStorage.setItem(LAYOUT_CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n      }\n\n      this.layoutConfigSubject.next(config);\n    }\n\n    updateConfig(fieldsToUpdate) {\n      const config = this.layoutConfigSubject.value;\n\n      if (!config) {\n        return;\n      }\n\n      const updatedConfig = Object.assign(Object.assign({}, config), fieldsToUpdate);\n      this.classes = getEmptyCssClasses();\n      this.cssVariables = getEmptyCSSVariables();\n      this.attrs = Object.assign({}, getEmptyHTMLAttributes());\n      this.layoutConfigSubject.next(updatedConfig);\n    }\n\n    setConfigWithoutLocalStorageChanges(config) {\n      this.layoutConfigSubject.next(config);\n    }\n\n    setConfigWithPageRefresh(config) {\n      this.setConfig(config);\n      document.location.reload();\n    }\n\n    getProp(path) {\n      const layoutConfig = this.layoutConfigSubject.value;\n\n      if (!layoutConfig) {\n        return;\n      }\n\n      return objectPath.get(layoutConfig, path);\n    }\n\n    setCSSClass(path, classesInStr) {\n      const cssClasses = this.classes[path];\n\n      if (!cssClasses) {\n        this.classes[path] = [];\n      }\n\n      classesInStr.split(' ').forEach(cssClass => this.classes[path].push(cssClass));\n    }\n\n    getCSSClasses(path) {\n      const cssClasses = this.classes[path];\n\n      if (!cssClasses) {\n        return [];\n      }\n\n      return cssClasses;\n    }\n\n    getStringCSSClasses(path) {\n      return this.getCSSClasses(path).join(' ');\n    }\n\n    getHTMLAttributes(path) {\n      const attributesObj = this.attrs[path];\n\n      if (!attributesObj) {\n        return {};\n      }\n\n      return attributesObj;\n    }\n\n    setHTMLAttribute(path, attrKey, attrValue) {\n      const attributesObj = this.attrs[path];\n\n      if (!attributesObj) {\n        this.attrs[path] = {};\n      }\n\n      this.attrs[path][attrKey] = attrValue;\n    }\n\n  }\n\n  LayoutService.ɵfac = function LayoutService_Factory(t) {\n    return new (t || LayoutService)();\n  };\n\n  LayoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LayoutService,\n    factory: LayoutService.ɵfac,\n    providedIn: 'root'\n  });\n  return LayoutService;\n})();","map":null,"metadata":{},"sourceType":"module"}