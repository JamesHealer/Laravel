{"ast":null,"code":"import { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AuthModel } from '../../../models/auth.model';\nimport { UsersTable } from '../../../../../_fake/users.table';\nimport { environment } from '../../../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst API_USERS_URL = `${environment.apiUrl}/users`;\nexport let AuthHTTPService = /*#__PURE__*/(() => {\n  class AuthHTTPService {\n    constructor(http) {\n      this.http = http;\n    } // public methods\n\n\n    login(email, password) {\n      const notFoundError = new Error('Not Found');\n\n      if (!email || !password) {\n        return of(notFoundError);\n      }\n\n      return this.getAllUsers().pipe(map(result => {\n        if (result.length <= 0) {\n          return notFoundError;\n        }\n\n        const user = result.find(u => {\n          return u.email.toLowerCase() === email.toLowerCase() && u.password === password;\n        });\n\n        if (!user) {\n          return notFoundError;\n        }\n\n        const auth = new AuthModel();\n        auth.authToken = user.authToken;\n        auth.refreshToken = user.refreshToken;\n        auth.expiresIn = new Date(Date.now() + 100 * 24 * 60 * 60 * 1000);\n        return auth;\n      }));\n    }\n\n    createUser(user) {\n      user.roles = [2]; // Manager\n\n      user.authToken = 'auth-token-' + Math.random();\n      user.refreshToken = 'auth-token-' + Math.random();\n      user.expiresIn = new Date(Date.now() + 100 * 24 * 60 * 60 * 1000);\n      user.pic = 'assets/media/avatars/300-1.jpg';\n      return this.http.post(API_USERS_URL, user);\n    }\n\n    forgotPassword(email) {\n      return this.getAllUsers().pipe(map(result => {\n        const user = result.find(u => u.email.toLowerCase() === email.toLowerCase());\n        return user !== undefined;\n      }));\n    }\n\n    getUserByToken(token) {\n      const user = UsersTable.users.find(u => {\n        return u.authToken === token;\n      });\n\n      if (!user) {\n        return of(undefined);\n      }\n\n      return of(user);\n    }\n\n    getAllUsers() {\n      return this.http.get(API_USERS_URL);\n    }\n\n  }\n\n  AuthHTTPService.ɵfac = function AuthHTTPService_Factory(t) {\n    return new (t || AuthHTTPService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuthHTTPService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthHTTPService,\n    factory: AuthHTTPService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthHTTPService;\n})();","map":null,"metadata":{},"sourceType":"module"}