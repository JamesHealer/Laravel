{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { UserParams } from '../models/UserParams';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ServiceSetupService = /*#__PURE__*/(() => {\n  class ServiceSetupService {\n    constructor(httpClient) {\n      this.httpClient = httpClient; // Getting base URL of Api from enviroment.\n\n      this.baseUrl = environment.KUPFApiUrl; //\n\n      this.serviceSetupDto = [];\n      this.userParams = new UserParams();\n    }\n\n    getUserParams() {\n      return this.userParams;\n    }\n\n    setUserParams(params) {\n      this.userParams = params;\n    } // add service setup\n\n\n    AddServiceSetup(data) {\n      return this.httpClient.post(this.baseUrl + `ServiceSetup/AddServiceSetup`, data);\n    } //update service setup\n\n\n    UpdateServiceSetup(response) {\n      return this.httpClient.put(this.baseUrl + `ServiceSetup/EditServiceSetup`, response);\n    } // delete service setup\n\n\n    DeleteServiceSetup(id) {\n      return this.httpClient.delete(`${this.baseUrl}ServiceSetup/DeleteServiceSetup?id=${id}`);\n    } //Get existing record to update...\n\n\n    GetServiceSetupById(id) {\n      return this.httpClient.get(this.baseUrl + `ServiceSetup/GetServiceSetupById/${id}`).pipe(map(serviceSetupDto => {\n        this.serviceSetupDto = serviceSetupDto;\n        return serviceSetupDto;\n      }));\n    } // Get all service setup\n\n\n    GetAllServiceSetupRecords(userParams, query) {\n      return this.httpClient.get(this.baseUrl + `ServiceSetup/GetServiceSetup?PageNumber=${userParams.pageNumber}&PageSize=${userParams.pageSize}&Query=${query}`, {\n        observe: 'response'\n      });\n    }\n\n  }\n\n  ServiceSetupService.ɵfac = function ServiceSetupService_Factory(t) {\n    return new (t || ServiceSetupService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ServiceSetupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ServiceSetupService,\n    factory: ServiceSetupService.ɵfac,\n    providedIn: 'root'\n  });\n  return ServiceSetupService;\n})();","map":null,"metadata":{},"sourceType":"module"}