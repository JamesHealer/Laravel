{"ast":null,"code":"import _asyncToGenerator from \"I:/DESourceCode/GitHubApril2022/KupfAngular1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as Papa from 'papaparse';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CsvParserService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.baseUrl = environment.KUPFApiUrl;\n  }\n\n  parseCsv(csvData) {\n    return new Promise((resolve, reject) => {\n      Papa.parse(csvData, {\n        header: true,\n        complete: result => {\n          resolve(result);\n        },\n        error: error => {\n          reject(error);\n        }\n      });\n    });\n  }\n\n  postEmployee(endPoint, employee) {\n    return new Promise((resolve, reject) => {\n      this.httpClient.post(this.baseUrl + endPoint, employee).subscribe({\n        next(res) {\n          console.log('==>', res);\n        },\n\n        error(msg) {\n          console.log('==>', msg);\n        }\n\n      });\n    });\n  }\n\n  postCsvData(endPoint, csvData) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      /** api/Employee/AddEmployee */\n      for (var employee of csvData) yield _this.postEmployee(endPoint, employee);\n    })();\n  }\n\n}\n\nCsvParserService.ɵfac = function CsvParserService_Factory(t) {\n  return new (t || CsvParserService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nCsvParserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CsvParserService,\n  factory: CsvParserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,OAAO,KAAKA,IAAZ,MAAsB,WAAtB;AAIA,SAASC,WAAT,QAA4B,8BAA5B;;;AAKA,OAAM,MAAOC,gBAAP,CAAuB;EAE3BC,YAAoBC,UAApB,EAA0C;IAAtB;IADpB,eAAUH,WAAW,CAACI,UAAtB;EAC8C;;EAC9CC,QAAQ,CAACC,OAAD,EAAgB;IACtB,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACrCV,IAAI,CAACW,KAAL,CAAWJ,OAAX,EAAoB;QAClBK,MAAM,EAAE,IADU;QAElBC,QAAQ,EAAGC,MAAD,IAAgB;UACxBL,OAAO,CAACK,MAAD,CAAP;QACD,CAJiB;QAKlBC,KAAK,EAAGA,KAAD,IAAe;UACpBL,MAAM,CAACK,KAAD,CAAN;QACD;MAPiB,CAApB;IASD,CAVM,CAAP;EAWD;;EACDC,YAAY,CAACC,QAAD,EAAmBC,QAAnB,EAAgC;IAC1C,OAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAoB;MACrC,KAAKN,UAAL,CAAgBe,IAAhB,CAAqB,KAAKC,OAAL,GAAeH,QAApC,EAA8CC,QAA9C,EAAwDG,SAAxD,CAAkE;QAChEC,IAAI,CAACC,GAAD,EAAI;UACNC,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,GAAnB;QACD,CAH+D;;QAIhER,KAAK,CAACW,GAAD,EAAI;UACPF,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,GAAnB;QACD;;MAN+D,CAAlE;IAQD,CATM,CAAP;EAUD;;EACKC,WAAW,CAACV,QAAD,EAAmBV,OAAnB,EAAyC;IAAA;;IAAA;MACxD;MACA,KAAI,IAAIW,QAAR,IAAoBX,OAApB,EACE,MAAM,KAAI,CAACS,YAAL,CAAkBC,QAAlB,EAA4BC,QAA5B,CAAN;IAHsD;EAIzD;;AAhC0B;;;mBAAhBhB,kBAAgB0B;AAAA;;;SAAhB1B;EAAgB2B,SAAhB3B,gBAAgB;EAAA4B,YAFf","names":["Papa","environment","CsvParserService","constructor","httpClient","KUPFApiUrl","parseCsv","csvData","Promise","resolve","reject","parse","header","complete","result","error","postEmployee","endPoint","employee","post","baseUrl","subscribe","next","res","console","log","msg","postCsvData","i0","factory","providedIn"],"sourceRoot":"","sources":["I:\\DESourceCode\\GitHubApril2022\\KupfAngular1\\src\\app\\modules\\csv-parser\\csv-parser.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as Papa from 'papaparse';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { resolve } from 'dns';\r\nimport { reject } from 'lodash';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CsvParserService {\r\n  baseUrl = environment.KUPFApiUrl;\r\n  constructor(private httpClient: HttpClient) {}\r\n  parseCsv(csvData: string): Promise<Papa.ParseResult<string[]>> {\r\n    return new Promise((resolve, reject) => {\r\n      Papa.parse(csvData, {\r\n        header: true, // Set to true if CSV has headers\r\n        complete: (result: any) => {\r\n          resolve(result);\r\n        },\r\n        error: (error: any) => {\r\n          reject(error);\r\n        },\r\n      });\r\n    });\r\n  }\r\n  postEmployee(endPoint: string, employee: any): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.httpClient.post(this.baseUrl + endPoint, employee).subscribe({\r\n        next(res) {\r\n          console.log('==>', res);\r\n        },\r\n        error(msg) {\r\n          console.log('==>', msg);\r\n        }\r\n      })\r\n    })\r\n  }\r\n  async postCsvData(endPoint: string, csvData: Array<Object>) {\r\n    /** api/Employee/AddEmployee */\r\n    for(var employee of csvData)\r\n      await this.postEmployee(endPoint, employee);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}