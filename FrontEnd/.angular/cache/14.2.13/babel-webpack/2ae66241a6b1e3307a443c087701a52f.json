{"ast":null,"code":"/* eslint-disable no-useless-escape */\n// DOCS: https://javascript.info/cookie\nexport class CookieComponent {\n  /**\r\n   * Returns the cookie with the given name, or undefined if not found\r\n   *\r\n   * @param  {string} name - cookie name\r\n   * @returns string | null\r\n   */\n  static get(name) {\n    let matches = document.cookie.match(new RegExp('(?:^|; )' + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + '=([^;]*)'));\n    return matches ? decodeURIComponent(matches[1]) : undefined;\n  }\n  /**\r\n   * Please note that a cookie value is encoded,\r\n   * so getCookie uses a built-in decodeURIComponent function to decode it.\r\n   *\r\n   * @param  {string} name - cookie name\r\n   * @param  {string | number | boolean} value - cookie value\r\n   * @param  {any} cookieOptions - cookie options\r\n   * @returns void\r\n   */\n\n\n  static set(name, value, cookieOptions) {\n    const options = Object.assign({\n      path: '/'\n    }, cookieOptions);\n\n    if (options.expires instanceof Date) {\n      options.expires = options.expires.toUTCString();\n    }\n\n    let updatedCookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n\n    for (let optionKey in options) {\n      updatedCookie += '; ' + optionKey;\n      let optionValue = options[optionKey];\n\n      if (optionValue !== true) {\n        updatedCookie += '=' + optionValue;\n      }\n    }\n\n    document.cookie = updatedCookie;\n  }\n  /**\r\n   * To delete a cookie, we can call it with a negative expiration date\r\n   *\r\n   * @param  {string} name\r\n   */\n\n\n  static delete(name) {\n    CookieComponent.set(name, '', {\n      'max-age': -1\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}