{"ast":null,"code":"import { map } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ReferenceDetailsService = /*#__PURE__*/(() => {\n  class ReferenceDetailsService {\n    constructor(httpClient) {\n      this.httpClient = httpClient; // Getting base URL of Api from enviroment.\n\n      this.baseUrl = environment.KUPFApiUrl; //\n\n      this.refTableDto = [];\n    } // add user mst\n\n\n    AddRefTable(response) {\n      return this.httpClient.post(this.baseUrl + `RefTable/AddRefTable`, response);\n    } //\n\n\n    DeleteRefTable(id) {\n      return this.httpClient.delete(`${this.baseUrl}RefTable/DeleteRefTable?refId=${id}`);\n    } //Get existing record to update...\n\n\n    GetRefTableRecordsByIdRefTypeAndSubType(refid, refType, refSubType) {\n      return this.httpClient.get(this.baseUrl + `RefTable/GetRefTableByIdRefTypeAndSubType/${refid}/${refType}/${refSubType}`).pipe(map(refTableDto => {\n        this.refTableDto = refTableDto;\n        return refTableDto;\n      }));\n    } //Get existing record to update \n\n\n    UpdateRefTable(response) {\n      return this.httpClient.put(this.baseUrl + `RefTable/UpdateRefTable`, response);\n    } //\n\n    /*\r\n        GetAllRefTableRecordsByRefTypeAndSubType(refType: string, refSubType: string) {\r\n      return this.httpClient.get<RefTableDto[]>(this.baseUrl + `RefTable/GetRefTableByRefTypeAndSubType/${refType}/${refSubType}`).pipe(\r\n        map(refTableDto => {\r\n          this.refTableDto = refTableDto;\r\n          return refTableDto;\r\n        })\r\n      )\r\n    }\r\n    */\n\n\n    GetAllRefTableRecordsByRefTypeAndSubType(pageNumber, pageSize, refType, refSubType, query) {\n      return this.httpClient.get(this.baseUrl + `RefTable/GetRefTableByRefTypeAndSubType/${refType}/${refSubType}?PageNumber=${pageNumber}&PageSize=${pageSize}&Query=${query}`, {\n        observe: 'response'\n      });\n    } //\n\n\n    GetAllRefTableRecords() {\n      return this.httpClient.get(this.baseUrl + `RefTable/GetRefTableData`).pipe(map(refTableDto => {\n        this.refTableDto = refTableDto;\n        return refTableDto;\n      }));\n    }\n\n  }\n\n  ReferenceDetailsService.ɵfac = function ReferenceDetailsService_Factory(t) {\n    return new (t || ReferenceDetailsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ReferenceDetailsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ReferenceDetailsService,\n    factory: ReferenceDetailsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ReferenceDetailsService;\n})();","map":null,"metadata":{},"sourceType":"module"}