{"ast":null,"code":"import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from '@cordobo/qrcode';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"qrcElement\"];\n\nclass QRCodeComponent {\n  constructor(renderer, sanitizer) {\n    this.renderer = renderer;\n    this.sanitizer = sanitizer;\n    this.allowEmptyString = false;\n    this.colorDark = \"#000000ff\";\n    this.colorLight = \"#ffffffff\";\n    this.cssClass = \"qrcode\";\n    this.elementType = \"canvas\";\n    this.errorCorrectionLevel = \"M\";\n    this.margin = 4;\n    this.qrdata = \"\";\n    this.scale = 4;\n    this.width = 10;\n    this.qrCodeURL = new EventEmitter();\n    this.context = null;\n  }\n\n  ngOnChanges() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this.createQRCode();\n    });\n  }\n\n  isValidQrCodeText(data) {\n    if (this.allowEmptyString === false) {\n      return !(typeof data === \"undefined\" || data === \"\" || data === \"null\" || data === null);\n    }\n\n    return !(typeof data === \"undefined\");\n  }\n\n  toDataURL(qrCodeConfig) {\n    return new Promise((resolve, reject) => {\n      QRCode.toDataURL(this.qrdata, qrCodeConfig, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n\n  toCanvas(canvas, qrCodeConfig) {\n    return new Promise((resolve, reject) => {\n      QRCode.toCanvas(canvas, this.qrdata, qrCodeConfig, error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(\"success\");\n        }\n      });\n    });\n  }\n\n  toSVG(qrCodeConfig) {\n    return new Promise((resolve, reject) => {\n      QRCode.toString(this.qrdata, qrCodeConfig, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n\n  renderElement(element) {\n    for (const node of this.qrcElement.nativeElement.childNodes) {\n      this.renderer.removeChild(this.qrcElement.nativeElement, node);\n    }\n\n    this.renderer.appendChild(this.qrcElement.nativeElement, element);\n  }\n\n  createQRCode() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.version && this.version > 40) {\n        console.warn(\"[angularx-qrcode] max value for `version` is 40\");\n        this.version = 40;\n      } else if (this.version && this.version < 1) {\n        console.warn(\"[angularx-qrcode]`min value for `version` is 1\");\n        this.version = 1;\n      } else if (this.version !== undefined && isNaN(this.version)) {\n        console.warn(\"[angularx-qrcode] version should be a number, defaulting to auto.\");\n        this.version = undefined;\n      }\n\n      try {\n        if (!this.isValidQrCodeText(this.qrdata)) {\n          throw new Error(\"[angularx-qrcode] Field `qrdata` is empty, set 'allowEmptyString=\\\"true\\\"' to overwrite this behaviour.\");\n        }\n\n        if (this.isValidQrCodeText(this.qrdata) && this.qrdata === \"\") {\n          this.qrdata = \" \";\n        }\n\n        const config = {\n          color: {\n            dark: this.colorDark,\n            light: this.colorLight\n          },\n          errorCorrectionLevel: this.errorCorrectionLevel,\n          margin: this.margin,\n          scale: this.scale,\n          type: this.elementType,\n          version: this.version,\n          width: this.width\n        };\n        const centerImageSrc = this.imageSrc;\n        const centerImageHeight = this.imageHeight || 40;\n        const centerImageWidth = this.imageWidth || 40;\n\n        switch (this.elementType) {\n          case \"canvas\":\n            const canvasElement = this.renderer.createElement(\"canvas\");\n            this.context = canvasElement.getContext(\"2d\");\n            this.toCanvas(canvasElement, config).then(() => {\n              if (this.ariaLabel) {\n                this.renderer.setAttribute(canvasElement, \"aria-label\", `${this.ariaLabel}`);\n              }\n\n              if (this.title) {\n                this.renderer.setAttribute(canvasElement, \"title\", `${this.title}`);\n              }\n\n              if (centerImageSrc && this.context) {\n                this.centerImage = new Image(centerImageWidth, centerImageHeight);\n\n                if (centerImageSrc !== this.centerImage.src) {\n                  this.centerImage.src = centerImageSrc;\n                }\n\n                if (centerImageHeight !== this.centerImage.height) {\n                  this.centerImage.height = centerImageHeight;\n                }\n\n                if (centerImageWidth !== this.centerImage.width) {\n                  this.centerImage.width = centerImageWidth;\n                }\n\n                const centerImage = this.centerImage;\n\n                if (centerImage) {\n                  centerImage.onload = () => {\n                    var _a;\n\n                    (_a = this.context) === null || _a === void 0 ? void 0 : _a.drawImage(centerImage, canvasElement.width / 2 - centerImageWidth / 2, canvasElement.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n                  };\n                }\n              }\n\n              this.renderElement(canvasElement);\n              this.emitQRCodeURL(canvasElement);\n            }).catch(e => {\n              console.error(\"[angularx-qrcode] canvas error:\", e);\n            });\n            break;\n\n          case \"svg\":\n            const svgParentElement = this.renderer.createElement(\"div\");\n            this.toSVG(config).then(svgString => {\n              this.renderer.setProperty(svgParentElement, \"innerHTML\", svgString);\n              const svgElement = svgParentElement.firstChild;\n              this.renderer.setAttribute(svgElement, \"height\", `${this.width}`);\n              this.renderer.setAttribute(svgElement, \"width\", `${this.width}`);\n              this.renderElement(svgElement);\n              this.emitQRCodeURL(svgElement);\n            }).catch(e => {\n              console.error(\"[angularx-qrcode] svg error:\", e);\n            });\n            break;\n\n          case \"url\":\n          case \"img\":\n          default:\n            const imgElement = this.renderer.createElement(\"img\");\n            this.toDataURL(config).then(dataUrl => {\n              if (this.alt) {\n                imgElement.setAttribute(\"alt\", this.alt);\n              }\n\n              if (this.ariaLabel) {\n                imgElement.setAttribute(\"aria-label\", this.ariaLabel);\n              }\n\n              imgElement.setAttribute(\"src\", dataUrl);\n\n              if (this.title) {\n                imgElement.setAttribute(\"title\", this.title);\n              }\n\n              this.renderElement(imgElement);\n              this.emitQRCodeURL(imgElement);\n            }).catch(e => {\n              console.error(\"[angularx-qrcode] img/url error:\", e);\n            });\n        }\n      } catch (e) {\n        console.error(\"[angularx-qrcode] Error generating QR Code:\", e.message);\n      }\n    });\n  }\n\n  emitQRCodeURL(element) {\n    const className = element.constructor.name;\n\n    if (className === SVGSVGElement.name) {\n      const svgHTML = element.outerHTML;\n      const blob = new Blob([svgHTML], {\n        type: \"image/svg+xml\"\n      });\n      const urlSvg = URL.createObjectURL(blob);\n      const urlSanitized = this.sanitizer.bypassSecurityTrustUrl(urlSvg);\n      this.qrCodeURL.emit(urlSanitized);\n      return;\n    }\n\n    let urlImage = \"\";\n\n    if (className === HTMLCanvasElement.name) {\n      urlImage = element.toDataURL(\"image/png\");\n    }\n\n    if (className === HTMLImageElement.name) {\n      urlImage = element.src;\n    }\n\n    fetch(urlImage).then(urlResponse => urlResponse.blob()).then(blob => URL.createObjectURL(blob)).then(url => this.sanitizer.bypassSecurityTrustUrl(url)).then(urlSanitized => {\n      this.qrCodeURL.emit(urlSanitized);\n    }).catch(error => {\n      console.error(\"[angularx-qrcode] Error when fetching image/png URL: \" + error);\n    });\n  }\n\n}\n\nQRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n  return new (t || QRCodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.DomSanitizer));\n};\n\nQRCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: QRCodeComponent,\n  selectors: [[\"qrcode\"]],\n  viewQuery: function QRCodeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n    }\n  },\n  inputs: {\n    allowEmptyString: \"allowEmptyString\",\n    colorDark: \"colorDark\",\n    colorLight: \"colorLight\",\n    cssClass: \"cssClass\",\n    elementType: \"elementType\",\n    errorCorrectionLevel: \"errorCorrectionLevel\",\n    imageSrc: \"imageSrc\",\n    imageHeight: \"imageHeight\",\n    imageWidth: \"imageWidth\",\n    margin: \"margin\",\n    qrdata: \"qrdata\",\n    scale: \"scale\",\n    version: \"version\",\n    width: \"width\",\n    alt: \"alt\",\n    ariaLabel: \"ariaLabel\",\n    title: \"title\"\n  },\n  outputs: {\n    qrCodeURL: \"qrCodeURL\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"qrcElement\", \"\"]],\n  template: function QRCodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClass);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeComponent, [{\n    type: Component,\n    args: [{\n      selector: \"qrcode\",\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: `<div #qrcElement [class]=\"cssClass\"></div>`\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }, {\n      type: i1.DomSanitizer\n    }];\n  }, {\n    allowEmptyString: [{\n      type: Input\n    }],\n    colorDark: [{\n      type: Input\n    }],\n    colorLight: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    elementType: [{\n      type: Input\n    }],\n    errorCorrectionLevel: [{\n      type: Input\n    }],\n    imageSrc: [{\n      type: Input\n    }],\n    imageHeight: [{\n      type: Input\n    }],\n    imageWidth: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    qrdata: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    version: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    alt: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    qrCodeURL: [{\n      type: Output\n    }],\n    qrcElement: [{\n      type: ViewChild,\n      args: [\"qrcElement\", {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass QRCodeModule {}\n\nQRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n  return new (t || QRCodeModule)();\n};\n\nQRCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QRCodeModule\n});\nQRCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: []\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeModule, [{\n    type: NgModule,\n    args: [{\n      providers: [],\n      declarations: [QRCodeComponent],\n      exports: [QRCodeComponent]\n    }]\n  }], null, null);\n})();\n\nexport { QRCodeComponent, QRCodeModule };","map":{"version":3,"names":["__awaiter","i0","EventEmitter","Component","ChangeDetectionStrategy","Input","Output","ViewChild","NgModule","QRCode","i1","QRCodeComponent","constructor","renderer","sanitizer","allowEmptyString","colorDark","colorLight","cssClass","elementType","errorCorrectionLevel","margin","qrdata","scale","width","qrCodeURL","context","ngOnChanges","createQRCode","isValidQrCodeText","data","toDataURL","qrCodeConfig","Promise","resolve","reject","err","url","toCanvas","canvas","error","toSVG","toString","renderElement","element","node","qrcElement","nativeElement","childNodes","removeChild","appendChild","version","console","warn","undefined","isNaN","Error","config","color","dark","light","type","centerImageSrc","imageSrc","centerImageHeight","imageHeight","centerImageWidth","imageWidth","canvasElement","createElement","getContext","then","ariaLabel","setAttribute","title","centerImage","Image","src","height","onload","_a","drawImage","emitQRCodeURL","catch","e","svgParentElement","svgString","setProperty","svgElement","firstChild","imgElement","dataUrl","alt","message","className","name","SVGSVGElement","svgHTML","outerHTML","blob","Blob","urlSvg","URL","createObjectURL","urlSanitized","bypassSecurityTrustUrl","emit","urlImage","HTMLCanvasElement","HTMLImageElement","fetch","urlResponse","ɵfac","Renderer2","DomSanitizer","ɵcmp","args","selector","changeDetection","OnPush","template","static","QRCodeModule","ɵmod","ɵinj","providers","declarations","exports"],"sources":["I:/DESourceCode/GitHubApril2022/KupfAngular1/node_modules/angularx-qrcode/fesm2015/angularx-qrcode.mjs"],"sourcesContent":["import { __awaiter } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from '@cordobo/qrcode';\nimport * as i1 from '@angular/platform-browser';\n\nclass QRCodeComponent {\n    constructor(renderer, sanitizer) {\n        this.renderer = renderer;\n        this.sanitizer = sanitizer;\n        this.allowEmptyString = false;\n        this.colorDark = \"#000000ff\";\n        this.colorLight = \"#ffffffff\";\n        this.cssClass = \"qrcode\";\n        this.elementType = \"canvas\";\n        this.errorCorrectionLevel = \"M\";\n        this.margin = 4;\n        this.qrdata = \"\";\n        this.scale = 4;\n        this.width = 10;\n        this.qrCodeURL = new EventEmitter();\n        this.context = null;\n    }\n    ngOnChanges() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.createQRCode();\n        });\n    }\n    isValidQrCodeText(data) {\n        if (this.allowEmptyString === false) {\n            return !(typeof data === \"undefined\" ||\n                data === \"\" ||\n                data === \"null\" ||\n                data === null);\n        }\n        return !(typeof data === \"undefined\");\n    }\n    toDataURL(qrCodeConfig) {\n        return new Promise((resolve, reject) => {\n            QRCode.toDataURL(this.qrdata, qrCodeConfig, (err, url) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(url);\n                }\n            });\n        });\n    }\n    toCanvas(canvas, qrCodeConfig) {\n        return new Promise((resolve, reject) => {\n            QRCode.toCanvas(canvas, this.qrdata, qrCodeConfig, (error) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve(\"success\");\n                }\n            });\n        });\n    }\n    toSVG(qrCodeConfig) {\n        return new Promise((resolve, reject) => {\n            QRCode.toString(this.qrdata, qrCodeConfig, (err, url) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(url);\n                }\n            });\n        });\n    }\n    renderElement(element) {\n        for (const node of this.qrcElement.nativeElement.childNodes) {\n            this.renderer.removeChild(this.qrcElement.nativeElement, node);\n        }\n        this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n    createQRCode() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.version && this.version > 40) {\n                console.warn(\"[angularx-qrcode] max value for `version` is 40\");\n                this.version = 40;\n            }\n            else if (this.version && this.version < 1) {\n                console.warn(\"[angularx-qrcode]`min value for `version` is 1\");\n                this.version = 1;\n            }\n            else if (this.version !== undefined && isNaN(this.version)) {\n                console.warn(\"[angularx-qrcode] version should be a number, defaulting to auto.\");\n                this.version = undefined;\n            }\n            try {\n                if (!this.isValidQrCodeText(this.qrdata)) {\n                    throw new Error(\"[angularx-qrcode] Field `qrdata` is empty, set 'allowEmptyString=\\\"true\\\"' to overwrite this behaviour.\");\n                }\n                if (this.isValidQrCodeText(this.qrdata) && this.qrdata === \"\") {\n                    this.qrdata = \" \";\n                }\n                const config = {\n                    color: {\n                        dark: this.colorDark,\n                        light: this.colorLight,\n                    },\n                    errorCorrectionLevel: this.errorCorrectionLevel,\n                    margin: this.margin,\n                    scale: this.scale,\n                    type: this.elementType,\n                    version: this.version,\n                    width: this.width,\n                };\n                const centerImageSrc = this.imageSrc;\n                const centerImageHeight = this.imageHeight || 40;\n                const centerImageWidth = this.imageWidth || 40;\n                switch (this.elementType) {\n                    case \"canvas\":\n                        const canvasElement = this.renderer.createElement(\"canvas\");\n                        this.context = canvasElement.getContext(\"2d\");\n                        this.toCanvas(canvasElement, config)\n                            .then(() => {\n                            if (this.ariaLabel) {\n                                this.renderer.setAttribute(canvasElement, \"aria-label\", `${this.ariaLabel}`);\n                            }\n                            if (this.title) {\n                                this.renderer.setAttribute(canvasElement, \"title\", `${this.title}`);\n                            }\n                            if (centerImageSrc && this.context) {\n                                this.centerImage = new Image(centerImageWidth, centerImageHeight);\n                                if (centerImageSrc !== this.centerImage.src) {\n                                    this.centerImage.src = centerImageSrc;\n                                }\n                                if (centerImageHeight !== this.centerImage.height) {\n                                    this.centerImage.height = centerImageHeight;\n                                }\n                                if (centerImageWidth !== this.centerImage.width) {\n                                    this.centerImage.width = centerImageWidth;\n                                }\n                                const centerImage = this.centerImage;\n                                if (centerImage) {\n                                    centerImage.onload = () => {\n                                        var _a;\n                                        (_a = this.context) === null || _a === void 0 ? void 0 : _a.drawImage(centerImage, canvasElement.width / 2 - centerImageWidth / 2, canvasElement.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n                                    };\n                                }\n                            }\n                            this.renderElement(canvasElement);\n                            this.emitQRCodeURL(canvasElement);\n                        })\n                            .catch((e) => {\n                            console.error(\"[angularx-qrcode] canvas error:\", e);\n                        });\n                        break;\n                    case \"svg\":\n                        const svgParentElement = this.renderer.createElement(\"div\");\n                        this.toSVG(config)\n                            .then((svgString) => {\n                            this.renderer.setProperty(svgParentElement, \"innerHTML\", svgString);\n                            const svgElement = svgParentElement.firstChild;\n                            this.renderer.setAttribute(svgElement, \"height\", `${this.width}`);\n                            this.renderer.setAttribute(svgElement, \"width\", `${this.width}`);\n                            this.renderElement(svgElement);\n                            this.emitQRCodeURL(svgElement);\n                        })\n                            .catch((e) => {\n                            console.error(\"[angularx-qrcode] svg error:\", e);\n                        });\n                        break;\n                    case \"url\":\n                    case \"img\":\n                    default:\n                        const imgElement = this.renderer.createElement(\"img\");\n                        this.toDataURL(config)\n                            .then((dataUrl) => {\n                            if (this.alt) {\n                                imgElement.setAttribute(\"alt\", this.alt);\n                            }\n                            if (this.ariaLabel) {\n                                imgElement.setAttribute(\"aria-label\", this.ariaLabel);\n                            }\n                            imgElement.setAttribute(\"src\", dataUrl);\n                            if (this.title) {\n                                imgElement.setAttribute(\"title\", this.title);\n                            }\n                            this.renderElement(imgElement);\n                            this.emitQRCodeURL(imgElement);\n                        })\n                            .catch((e) => {\n                            console.error(\"[angularx-qrcode] img/url error:\", e);\n                        });\n                }\n            }\n            catch (e) {\n                console.error(\"[angularx-qrcode] Error generating QR Code:\", e.message);\n            }\n        });\n    }\n    emitQRCodeURL(element) {\n        const className = element.constructor.name;\n        if (className === SVGSVGElement.name) {\n            const svgHTML = element.outerHTML;\n            const blob = new Blob([svgHTML], { type: \"image/svg+xml\" });\n            const urlSvg = URL.createObjectURL(blob);\n            const urlSanitized = this.sanitizer.bypassSecurityTrustUrl(urlSvg);\n            this.qrCodeURL.emit(urlSanitized);\n            return;\n        }\n        let urlImage = \"\";\n        if (className === HTMLCanvasElement.name) {\n            urlImage = element.toDataURL(\"image/png\");\n        }\n        if (className === HTMLImageElement.name) {\n            urlImage = element.src;\n        }\n        fetch(urlImage)\n            .then((urlResponse) => urlResponse.blob())\n            .then((blob) => URL.createObjectURL(blob))\n            .then((url) => this.sanitizer.bypassSecurityTrustUrl(url))\n            .then((urlSanitized) => {\n            this.qrCodeURL.emit(urlSanitized);\n        })\n            .catch((error) => {\n            console.error(\"[angularx-qrcode] Error when fetching image/png URL: \" + error);\n        });\n    }\n}\nQRCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: QRCodeComponent, deps: [{ token: i0.Renderer2 }, { token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });\nQRCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"14.0.1\", type: QRCodeComponent, selector: \"qrcode\", inputs: { allowEmptyString: \"allowEmptyString\", colorDark: \"colorDark\", colorLight: \"colorLight\", cssClass: \"cssClass\", elementType: \"elementType\", errorCorrectionLevel: \"errorCorrectionLevel\", imageSrc: \"imageSrc\", imageHeight: \"imageHeight\", imageWidth: \"imageWidth\", margin: \"margin\", qrdata: \"qrdata\", scale: \"scale\", version: \"version\", width: \"width\", alt: \"alt\", ariaLabel: \"ariaLabel\", title: \"title\" }, outputs: { qrCodeURL: \"qrCodeURL\" }, viewQueries: [{ propertyName: \"qrcElement\", first: true, predicate: [\"qrcElement\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `<div #qrcElement [class]=\"cssClass\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: QRCodeComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: \"qrcode\",\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `<div #qrcElement [class]=\"cssClass\"></div>`,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i1.DomSanitizer }]; }, propDecorators: { allowEmptyString: [{\n                type: Input\n            }], colorDark: [{\n                type: Input\n            }], colorLight: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], elementType: [{\n                type: Input\n            }], errorCorrectionLevel: [{\n                type: Input\n            }], imageSrc: [{\n                type: Input\n            }], imageHeight: [{\n                type: Input\n            }], imageWidth: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], qrdata: [{\n                type: Input\n            }], scale: [{\n                type: Input\n            }], version: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], alt: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], qrCodeURL: [{\n                type: Output\n            }], qrcElement: [{\n                type: ViewChild,\n                args: [\"qrcElement\", { static: true }]\n            }] } });\n\nclass QRCodeModule {\n}\nQRCodeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: QRCodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nQRCodeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.0.1\", ngImport: i0, type: QRCodeModule, declarations: [QRCodeComponent], exports: [QRCodeComponent] });\nQRCodeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: QRCodeModule, providers: [] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.0.1\", ngImport: i0, type: QRCodeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [],\n                    declarations: [QRCodeComponent],\n                    exports: [QRCodeComponent],\n                }]\n        }] });\n\nexport { QRCodeComponent, QRCodeModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}